#!/usr/bin/python

################################################################################
# parse-manifest
# Parses the repo manifest for a project and generates code output to execute
# commands across all repositories, such as git commands
################################################################################

import codecs
import copy
import os
import re
import sys

from xml.dom import minidom

projectroot = os.environ['PROJECT_ROOT']
manifestFile = os.environ['PROJECT_MANIFEST']
outputPath = os.environ['PROJECT_CODEGEN_DIR']
buildPath = os.environ['PROJECT_BUILD_DIR']

# check the environment is set
if not projectroot:
    sys.exit(-1)
if not manifestFile:
    sys.exit(-1)
if not outputPath:
    sys.exit(-1)

outputClone = codecs.open(outputPath + "/clone.sh", 'w', 'utf-8')
outputGit = codecs.open(outputPath + "/git.sh", 'w', 'utf-8')

manifestDom = minidom.parse(manifestFile)
remoteList = manifestDom.getElementsByTagName('remote')

remotes = {} # dictionary mapping name to fetch
for r in remoteList:
    remotes[r.attributes['name'].value] = r.attributes['fetch'].value

projectList = manifestDom.getElementsByTagName('project')

# put the projects into a list

outputClone.write("#!/bin/bash\n")
outputClone.write("source " + projectroot + "/scripts/include/common.sh\n")
outputGit.write("#!/bin/bash\n")
for p in projectList:
    r = p.attributes['remote'].value
    server_path = p.attributes['name'].value
    local_path = p.attributes['path'].value
    # write the clone commands
    outputClone.write("pushd " + projectroot + " >> /dev/null\n")
    outputClone.write("clone_or_pull " + remotes[r] + "/" + server_path + " " + \
            projectroot + " " + local_path + "\n");
    outputClone.write("popd >> /dev/null\n")
    # for any generic git command other than clone
    outputGit.write("pushd " + projectroot + "/" + local_path + " >> /dev/null\n")
    outputGit.write("echo \"Repository: " + local_path + "\"\n")
    outputGit.write("git $1 \n")
    outputGit.write("popd >> /dev/null\n")
    outputGit.write("echo \"\"\n")

