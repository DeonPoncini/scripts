#!/bin/bash

################################################################################
# build
################################################################################

if [ -z ${PROJECT_ROOT} ] ; then
    echo "Please source open-project.sh"
    exit 1
fi

source ${PROJECT_SCRIPT_DIR}/include/common.sh

VALID_OPTIONS="cmake|clean|uninstall|help"
VALID_TARGETS="linux-64"
VALID_BUILDS="debug|release"

DEFAULT_TARGET="linux-64"
DEFAULT_BUILD="debug"

IFS='|' read -a ARRAY_OPTIONS <<< "$VALID_OPTIONS"
IFS='|' read -a ARRAY_TARGETS <<< "$VALID_TARGETS"
IFS='|' read -a ARRAY_BUILDS <<< "$VALID_BUILDS"

################################################################################
# print usage
################################################################################
function usage {
    echo "Usage: build [-t $VALID_TARGETS] [-b $VALID_BUILDS] [$VALID_OPTIONS]"
    exit 1
}

################################################################################
# clean
################################################################################
function clean {
    echo "Cleaning build directories..."
    rm -rf $PROJECT_BUILD_DIR/*
    rm -rf $PROJECT_SYSTEM_DIR/*
}

################################################################################
# build
# $1 build directory
# $2 cmake options
# $3 force cmake
################################################################################
function build {
    local build_dir=$1
    local cmake_options=$2
    local force_cmake=$3

    # order the dependencies of the project manifest
    ${PROJECT_SCRIPT_DIR}/bin/order-deps
    check_error $? "dependency ordering failed, aborting..."

    # run cmake if we need to
    if [ ! -e ${build_dir}/CMakeCache.txt ] || [ -n "${force_cmake}" ] ; then
        pushd ${build_dir} >> /dev/null
        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS='ON' ${cmake_options} $PROJECT_SCRIPT_DIR/cmake
        check_error $? "cmake failed, aborting..."
        popd >> /dev/null
    fi

    # run make
    pushd ${build_dir} >> /dev/null
    make install
    check_error $? "make install failed, aborting..."
    popd >> /dev/null
}

################################################################################
# argument parsing
################################################################################
BUILD_TARGETS=""
BUILD_BUILDS=""
while getopts ":t:b:" o; do
    case "${o}" in
        t)
            BUILD_TARGETS="${BUILD_TARGET}${OPTARG},"
            ;;
        b)
            BUILD_BUILDS="${BUILD_TARGET}${OPTARG},"
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

# set the defaults if not set
if [ "${BUILD_TARGETS}" = "" ] ; then
    BUILD_TARGETS=$DEFAULT_TARGET
fi

if [ "${BUILD_BUILDS}" = "" ] ; then
    BUILD_BUILDS=$DEFAULT_BUILD
fi

# convert comma separated options into arrays
IFS=',' read -a BUILD_TARGETS <<< "${BUILD_TARGETS%,}"
IFS=',' read -a BUILD_BUILDS <<< "${BUILD_BUILDS%,}"

# validate
for t in "${BUILD_TARGETS[@]}" ; do
    if [ $(list_contains $t ${ARRAY_TARGETS[@]}) = false ] ; then
        echo "Invalid target $t"
        usage
    fi
done

for b in "${BUILD_BUILDS[@]}" ; do
    if [ $(list_contains $b ${ARRAY_BUILDS[@]}) = false ] ; then
        echo "Invalid build $b"
        usage
    fi
done

################################################################################
# options
################################################################################
IFS=' ' read -a BUILD_OPTIONS <<< "$(parse_params $@)"

for o in "${BUILD_OPTIONS[@]}" ; do
    if [ $(list_contains $o ${ARRAY_OPTIONS[@]}) = false ] ; then
        echo "Invalid option $o"
        usage
    fi
done

# operate on options
if [ $(list_contains help ${BUILD_OPTIONS[@]}) = true ] ; then
    usage
fi

FORCE_CMAKE=$(list_contains cmake ${BUILD_OPTIONS[@]})

# build each build type for each target
for b in "${BUILD_BUILDS[@]}" ; do
    # for each target
    for t in "${BUILD_TARGETS}" ;  do

        BUILD_PATH=$PROJECT_BUILD_DIR/${b}/${t}
        INSTALL_PATH=$PROJECT_INSTALL_DIR/${b}/${t}
        SYSTEM_PATH=${PROJECT_SYSTEM_DIR}/${b}/${t}

        if [ $(list_contains clean ${BUILD_OPTIONS[@]}) = true ] ; then
            echo "****************************"
            echo " CLEANING $t [$b]"
            echo "****************************"
            echo $BUILD_PATH
            rm -rf $BUILD_PATH
            rm -rf $SYSTEM_PATH
            continue
        fi

        if [ $(list_contains uninstall ${BUILD_OPTIONS[@]}) = true ] ; then
            echo "****************************"
            echo " UNINSTALLING $t [$b]"
            echo "****************************"
            rm -rf $INSTALL_PATH
        fi

        echo "****************************"
        echo " BUILDING $t [$b]"
        echo "****************************"

        # setup the cmake options
        CMAKE_OPTIONS="-DCMAKE_PREFIX_PATH=${SYSTEM_PATH}"
        CMAKE_OPTIONS="${CMAKE_OPTIONS} -DCMAKE_INSTALL_PREFIX=${INSTALL_PATH}"
        CMAKE_OPTIONS="${CMAKE_OPTIONS} -DCMAKE_BUILD_TYPE=${b^}"
        CMAKE_OPTIONS="${CMAKE_OPTIONS} -DBUILD_PATH=${BUILD_PATH}"

        make_dir $BUILD_PATH
        make_dir $SYSTEM_PATH
        make_dir $INSTALL_PATH

        build "${BUILD_PATH}" "${CMAKE_OPTIONS}" "${FORCE_CMAKE}"
    done
done
